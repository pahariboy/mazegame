#include<iostream>
#include<cstdlib>
using namespace std;
struct node
{
  int x;
  int y;
  struct node *next;
};
struct node* insertion(struct node *start,int i,int j)
{        struct node *ptr,*n;
        ptr=start;
        n=new node;
        n->x=i;
        n->y=j;
       if(start==NULL)
        {
       start=n;
       start->next=NULL;
       ptr=start;
        }
        else
        {
            while(ptr->next!=NULL)
            {
                ptr=ptr->next;
            }
        ptr->next=n;
        n->next=NULL;
        ptr=ptr->next;
        }
return start;
}
struct node* insertionAtBeg(struct node *start,int i,int j)
{        struct node *ptr,*n;
        n=new node;
        n->x=i;
        n->y=j;
       if(start==NULL)
        {
       start=n;
       start->next=NULL;
        }
        else
        {
        n->next=start;
        start=n;
        }

return start;
}
struct node* deletion(struct node *start)
{
     struct node *ptr;
    ptr=start;
    start=start->next;
    ptr->next=NULL;

      delete(ptr);
      return start;
}
struct node *right(char **arr,int m,int n,int col,struct node* start,int option)
{
  if(n<(col-1) && arr[m][n]!='|'&& arr[m][n]!='!' && arr[m][n]!='-')
  {
      if(arr[m][n]!='$'&& arr[m][n]!='*' )
    {
        if(option==2)
        {
      start=insertion(start,m,n);
        }
        else
        {
      start=insertionAtBeg(start,m,n);
        }
      arr[m][n]='$';
      }
  }
  return start;
}
struct node* left(char **arr,int m,int n,struct node *start,int option)
{
      if(n>=1 && arr[m][n]!='|'&& arr[m][n]!='!' && arr[m][n]!='-')
  {
      if(arr[m][n]!='$'&& arr[m][n]!='*' )
    {
    if(option==2)
        {
      start=insertion(start,m,n);
        }
        else
        {
      start=insertionAtBeg(start,m,n);
        }
      arr[m][n]='$';

      }
  }
  return start;
}
struct node* up(char **arr,int m,int n,struct node *start,int option)
{
  if(m>=1 && arr[m][n]!='|' && arr[m][n]!='!' && arr[m][n]!='-')
  {
      if(arr[m][n]!='$'&& arr[m][n]!='*')
    {
if(option==2)
        {
      start=insertion(start,m,n);
        }
        else
        {
      start=insertionAtBeg(start,m,n);
        }
      arr[m][n]='$';


      }
  }
return start;
}
struct node* down(char **arr,int m,int n,int row,struct node *start,int option)
{
 if(m<(row-1) && arr[m][n]!='|' && arr[m][n]!='!' && arr[m][n]!='-')
  {
      if(arr[m][n]!='$'&& arr[m][n]!='*')
    {
     if(option==2)
        {
      start=insertion(start,m,n);
        }
        else
        {
      start=insertionAtBeg(start,m,n);
        }
      arr[m][n]='$';
      }
  }
  return start;
}
int stack_size(struct node*start)
{
    struct node *ptr=start;
    int count=0;
    while(ptr!=NULL)
    {
        count++;
        ptr=ptr->next;
    }
    return count;
}
struct node * chances(char **arr1,struct node *start,int **flag)
{
    int size=stack_size(start);
    if(size<5)
    {
while(start->next!=NULL)
{
    arr1[start->x][start->y]=' ';
    arr1[start->x][start->y]=0;
    start=deletion(start);

}
    }
    else
    {
        int len=size-5;
while(size!=len)
{
    arr1[start->x][start->y]=' ';
    flag[start->x][start->y]=0;
    start=deletion(start);
    size--;
}
    }
    return start;
}
void startgame(char **arr1,char **arr,int m,int n,int x,int y)
{
int i,j;
int **flag=0;
flag=new int*[8];

  for(i=0;i<8;i++)
  {
      flag[i]=new int[8];
  }
    struct node *start=NULL;
    char option;
    int points=0,chance=3;
    arr1[m][n]='*';
    start=insertionAtBeg(start,m,n);
    arr1[x][y]='*';
    cout<<"Enter q to start the game:-";
    cin>>option;
while(option!='x')
    {
if(option=='w')
    {
        m--;
if(m==x && n==y)
      {
          break;
      }
else if(flag[m][n]==1)
{
    cout<<"DONT TRY TO OVERSMART"<<endl;
    m++;
}
else if((arr[m][n]=='*' || arr[m][n]=='$' ))
      {
      flag[m][n]=1;
       arr1[m][n]='*';
       start=insertionAtBeg(start,m,n);
       points=points+1;
      }
else if(arr[m][n]=='|' || arr[m][n]==' ' || arr[m][n]=='!' || arr[m][n]=='-')
      {
    start=chances(arr1,start,flag);
    m=start->x;
    n=start->y;
    chance--;
    points=0;
    cout<<"CHANCES LEFT:-"<<chance<<endl;
    if(chance==0)
    {break;}
      }
    }
else if(option=='a')
    {
        n--;
if(m==x && n==y)
      {
          break;
      }
else if(flag[m][n]==1)
{
    cout<<"DONT TRY TO OVERSMART"<<endl;
    n++;
}
else if(arr[m][n]=='*' || arr[m][n]=='$')
      {
           flag[m][n]=1;
          arr1[m][n]='*';
          start=insertionAtBeg(start,m,n);
 points=points+1;
      }
else if(arr[m][n]=='|' || arr[m][n]==' ' || arr[m][n]=='!' || arr[m][n]=='-')
      {
    start=chances(arr1,start,flag);
    chance--;
    m=start->x;
    n=start->y;
    cout<<"CHANCES LEFT:- "<<chance<<endl;
    points=0;
 if(chance==0)
{break;}
      }
    }
else if(option=='s')
    {
        m++;
if(m==x && n==y)
      {
          break;
      }
else if(flag[m][n]==1)
{
    cout<<"DONT TRY TO OVERSMART"<<endl;
    m--;
}
else if(arr[m][n]=='*'|| arr[m][n]=='$')
      {
     flag[m][n]=1;
    arr1[m][n]='*';
    start=insertionAtBeg(start,m,n);
    points=points+1;
      }
else if( arr[m][n]=='|' || arr[m][n]==' ' || arr[m][n]=='!' || arr[m][n]=='-')
      {
   start=chances(arr1,start,flag);
   points=0;
   chance--;
   m=start->x;
   n=start->y;
   cout<<"CHANCES LEFT:- "<<chance<<endl;
if(chance==0)
{
    break;
}
}

}
else if(option=='d')
    {
    n++;
if(m==x && n==y)
      {
          break;
      }
else if(flag[m][n]==1)
{
    cout<<"DONT TRY TO OVERSMART"<<endl;
    n--;
}
else if(arr[m][n]=='*'|| arr[m][n]=='$')
      {          arr1[m][n]='*';
flag[m][n]=1;
      start=insertionAtBeg(start,m,n);
      points=points+1;
      }
else if( arr[m][n]=='|' || arr[m][n]==' ' || arr[m][n]=='!' || arr[m][n]=='-')
      {
    start=chances(arr1,start,flag);
    chance--;
    points=0;
    m=start->x;
    n=start->y;
    cout<<"CHANCES LEFT:- "<<chance<<endl;
if(chance==0)
    {break;}
      }
}
for(i=0;i<8;i++)
  {
      for(j=0;j<8;j++)
      {
          cout<<arr1[i][j]<<" ";
      }
      cout<<endl;
  }

     cout<<"points are:- "<<points<<endl;
     cout<<"Enter x to exit:-";
     cin>>option;
    system("CLS");
    }
if(m==x && n==y){
        cout<<"CONGRATULATION"<<endl;
    }
else if(chance==0)
    {
        cout<<"GAME OVER"<<endl;
    }
for(int i=0;i<8;i++)
  {
for(int j=0;j<8;j++)
      {
          cout<<arr1[i][j]<<" ";
      }
      cout<<endl;
  }
cout<<"points are:- "<<points<<endl;

}
void mazegame (char **arr,int row,int col)
{
      int i,j;
char **arr1=new char*[row];
  for(int i=0;i<row;i++)
  {
      arr1[i]=new char[col];
  }

      for(i=0;i<row;i++)
   {
      for(j=0;j<col;j++)
      {
          arr1[i][j]=arr[i][j];
      }
  }
    int x,y,m,n,option;
    struct node *start=NULL,*start2=NULL,*ptr;
  cout<<"Enter the source point"<<endl;
  cin>>m>>n;
 cout<<"Enter the destination point"<<endl;
  cin>>x>>y;
  cout<<"1.Stack"<<endl;


  cout<<"2.Queue"<<endl;
  cout<<"choose option :- ";
  cin>>option;
  if(option==1)
  {
        start2=insertionAtBeg(start2,m,n);
           while(start2->x!=x || start2->y!=y)
    {
        ptr=start2;
   start2=right(arr,ptr->x,ptr->y+1,col,start2,option);
    start2=down(arr,ptr->x+1,ptr->y,row,start2,option);
    start2=up(arr,ptr->x-1,ptr->y,start2,option);
    start2=left(arr,ptr->x,ptr->y-1,start2,option);
    arr[ptr->x][ptr->y]='*';
    if(ptr->x==start2->x && ptr->y==start2->y)
    {
       start2=deletion(start2);
    }
}
    arr[start2->x][start2->y]='*';
  }
  else if(option==2)
  {
        start=insertion(start,m,n);
           while(start->x!=x || start->y!=y)
    {
   start=right(arr,start->x,start->y+1,col,start,option);
    start=down(arr,start->x+1,start->y,row,start,option);
    start=up(arr,start->x-1,start->y,start,option);
    start=left(arr,start->x,start->y-1,start,option);
    arr[start->x][start->y]='*';
    start=deletion(start);
    }
    arr[start->x][start->y]='*';
   }
  else
{
 cout<<"wrong option"<<endl;
}
cout<<"PATH"<<endl;
 for(i=0;i<row;i++)
  {
      for(j=0;j<col;j++)
      {
          cout<<arr[i][j]<<" ";
      }
      cout<<endl;
  }
startgame(arr1,arr,m,n,x,y);
}
int  main()
{
  int j,row=8,col=8,i;

  char **arr=new char*[row];
  cout<<"Enter the matrix"<<endl;
  for(i=0;i<row;i++)
  {
      arr[i]=new char[col];
  }
arr[0][0]='-';arr[0][1]='-';arr[0][2]='-';arr[0][3]='-';arr[0][4]='-';arr[0][5]='-';arr[0][6]='-';arr[0][7]='-';
arr[1][0]='!';arr[1][1]=' ';arr[1][2]='|';arr[1][3]='|';arr[1][4]=' ';arr[1][5]=' ';arr[1][6]=' ';arr[1][7]='!';
arr[2][0]='!';arr[2][1]=' ';arr[2][2]='|';arr[2][3]=' ';arr[2][4]=' ';arr[2][5]=' ';arr[2][6]=' ';arr[2][7]='!';
arr[3][0]='!';arr[3][1]=' ';arr[3][2]='|';arr[3][3]=' ';arr[3][4]='|';arr[3][5]='|';arr[3][6]=' ';arr[3][7]='!';
arr[4][0]='!';arr[4][1]=' ';arr[4][2]=' ';arr[4][3]=' ';arr[4][4]=' ';arr[4][5]=' ';arr[4][6]=' ';arr[4][7]='!';
arr[5][0]='!';arr[5][1]='|';arr[5][2]='|';arr[5][3]='|';arr[5][4]='|';arr[5][5]=' ';arr[5][6]=' ';arr[5][7]='!';
arr[6][0]='!';arr[6][1]=' ';arr[6][2]=' ';arr[6][3]='|';arr[6][4]=' ';arr[6][5]=' ';arr[6][6]=' ';arr[6][7]='!';
arr[7][0]='-';arr[7][1]='-';arr[7][2]='-';arr[7][3]='-';arr[7][4]='-';arr[7][5]='-';arr[7][6]='-';arr[7][7]='-';
   for(i=0;i<row;i++)
  {
      for(j=0;j<col;j++)
      {
          cout<<arr[i][j]<<" ";
      }
      cout<<endl;
  }
  mazegame(arr,row,col);
}
